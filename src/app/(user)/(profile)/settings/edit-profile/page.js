"use client";
import TextFormField from "@/components/atoms/Forms/textFormField";

import { useEffect, useState } from "react";
import { useFormik } from "formik";
import * as Yup from "yup";
import Image from "next/image";
import Cookies from "js-cookie";
import axios from "axios";
import { useDispatch } from "react-redux";
import { fetchUser, setFullname, setProfileImage } from "@/redux/userSlice";

export const metadata = {
  title: "Edit My Profile",
  description: "Generated by create next app",
};

export default function Profile() {
  const [previewImage, setPreviewImage] = useState(null);
  const [data, setData] = useState(null);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchUser());
  }, []);

  //VALIDATION, CONTROLLER FORM, AND IMAGE
  const validationSchema = Yup.object().shape({
    image: Yup.mixed()
      .test(
        "fileSize",
        "File size should be less than 1MB",
        (value) => value && value.size <= 1048576
      )
      .test(
        "fileType",
        "Only JPEG, JPG, PNG images are allowed",
        (value) =>
          value && ["image/jpeg", "image/jpg", "image/png"].includes(value.type)
      ),
    fullname: Yup.string().min(3),
    phone: Yup.string().matches(
      /^(^\+62|62|^08)(\d{3,4}-?){2}\d{3,4}$/,
      "Phone number is not valid, ex. +628xxxxxxxxxx"
    ),
  });

  const formik = useFormik({
    initialValues: {
      username: data?.username,
      email: data?.email,
      fullname: data ? data.fullname : "",
      image: data ? data.image : null,
      phone: data ? data.phone : "",
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const token = Cookies.get("token");
        const config = {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        };

        const formData = new FormData();
        formData.append("image", values.image);
        formData.append("fullname", values.fullname);
        formData.append("phone", values.phone);

        const res = await axios.put(
          "http://localhost:4000/api/upload",
          formData,
          config
        );
        console.log(res.data);

        // Update the fullname in the store
        dispatch(setFullname(values.fullname));
        dispatch(setProfileImage(res.data.data?.image));
      } catch (error) {
        console.error("Error submitting form:", error);
      }
    },
  });

  const handleImageChange = (event) => {
    const file = event.target.files[0];
    console.log(file);
    formik.setFieldValue("image", file);

    if (file) {
      setPreviewImage(URL.createObjectURL(file));
    } else {
      setPreviewImage(null);
    }
  };

  const fetchData = async () => {
    try {
      const token = Cookies.get("token");
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      };
      const res = await axios.get("http://localhost:4000/api/getme", config);
      console.log(res);
      setData(res.data.data);
      if (res) {
        formik.setValues({
          fullname: res.data.data?.fullname,
          phone: res.data.data?.phone,
        });
        setPreviewImage(res.data.data?.image);
      } else {
        console.log("Failed");
        // setShowErrorModal(true);
        // setIsLoading(false);
      }
    } catch (error) {
      console.log("Error fetching user data:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="lg:mb-0 lg:mt-10 lg:ml-[25%] w-full lg:w-auto select-none">
      <h1 className="text-4xl font-bold text-indigo-950">Edit Profile</h1>
      <p className="mt-2 text-gray-400">
        Input your valid information <br /> and let&apos;s rent our cars
      </p>
      <div className="my-10">
        <form
          onSubmit={formik.handleSubmit}
          className="flex flex-col rounded-2xl bg-darkGrey p-8"
        >
          {/* Img */}
          <h3>My Avatar (Max. 1MB)</h3>
          <div
            className={`mt-4 flex justify-center items-center h-24 w-24 rounded-full bg-white border ${
              previewImage ? "border-none" : "border-blue-500"
            } `}
          >
            <Image
              src={previewImage ? previewImage : "/assets/svgs/ic-upload.svg"}
              width={800}
              height={800}
              alt="ic-upload"
              className="w-24 h-24 rounded-full"
            />
          </div>
          <input
            type="file"
            name="image"
            accept="image/jpg, image/jpeg, image/png"
            className="mt-4"
            onChange={handleImageChange}
          />

          <p className="mt-2 text-sm text-gray-400">
            Format file jpg, jpeg, png.
          </p>
          {formik.errors.image && formik.touched.image && (
            <div className="text-red-500">{formik.errors.image}</div>
          )}

          <div className="space-y-2 mt-8">
            <TextFormField
              name="username"
              label={"Username"}
              type={"text"}
              disabled={true}
              placeholder={data?.username}
              value={formik.values.username}
              onChange={formik.handleChange}
              errorMessage={
                formik.touched.username && formik.errors.username
                  ? formik.errors.username
                  : null
              }
              onBlur={formik.handleBlur}
            />
            <TextFormField
              name="email"
              label={"Email"}
              type={"email"}
              disabled={true}
              placeholder={data?.email}
              value={formik.values.email}
              onChange={formik.handleChange}
              errorMessage={
                formik.touched.email && formik.errors.email
                  ? formik.errors.email
                  : null
              }
              onBlur={formik.handleBlur}
            />
            <TextFormField
              name="fullname"
              label={"Fullname"}
              type={"text"}
              placeholder={data?.fullname}
              value={formik.values.fullname}
              onChange={formik.handleChange}
              errorMessage={
                formik.touched.fullname && formik.errors.fullname
                  ? formik.errors.fullname
                  : null
              }
              onBlur={formik.handleBlur}
            />

            <TextFormField
              name="phone"
              label={"Phone"}
              type={"number"}
              placeholder={data?.phone}
              value={formik.values.phone}
              onChange={formik.handleChange}
              errorMessage={
                formik.touched.phone && formik.errors.phone
                  ? formik.errors.phone
                  : null
              }
              onBlur={formik.handleBlur}
            />
          </div>
          <button
            type="submit"
            className="bg-blue-500 mt-8 w-auto py-2 rounded-full shadow-lg shadow-blue-400 text-white font-semibold text-lg"
          >
            SUBMIT
          </button>
        </form>
      </div>
    </div>
  );
}
